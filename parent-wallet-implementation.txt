PARENT WALLET IMPLEMENTATION GUIDE
====================================

This file contains all the code you need to add to your parent window to handle
Jupiter and Solana wallet actions from the iframe.

REQUIRED IMPORTS
================
Make sure you have these imports in your parent window:

```typescript
import { Connection, Transaction, VersionedTransaction } from '@solana/web3.js';
```

COMPLETE MESSAGE HANDLER
========================
Add this complete message handler to your parent window:

```typescript
window.addEventListener('message', async (event) => {
  const { source, action, payload, requestId } = event.data;
  
  if (source !== 'alpha-iframe') return;
  
  switch (action) {
    case 'getPublicKey':
      try {
        const publicKey = wallet.publicKey.toString();
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          result: { publicKey }
        }, '*');
      } catch (error) {
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          error: error.message
        }, '*');
      }
      break;
      
    case 'signTransaction':
      try {
        const { transaction: transactionBase64, rpcEndpoint } = payload;
        const transactionBuf = Buffer.from(transactionBase64, 'base64');
        
        // Try to deserialize as regular Transaction first
        let transaction;
        try {
          transaction = Transaction.from(transactionBuf);
        } catch {
          // If that fails, try as VersionedTransaction
          transaction = VersionedTransaction.deserialize(transactionBuf);
        }
        
        const signedTransaction = await wallet.signTransaction(transaction);
        const signature = signedTransaction.serialize().toString('base64');
        
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          result: { signature }
        }, '*');
      } catch (error) {
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          error: error.message
        }, '*');
      }
      break;
      
    case 'jupiterSwap':
      try {
        const { swapTransaction, userPublicKey, rpcEndpoint } = payload;
        
        // Deserialize the VersionedTransaction
        const swapTransactionBuf = Buffer.from(swapTransaction, 'base64');
        const transaction = VersionedTransaction.deserialize(swapTransactionBuf);
        
        // Sign the transaction with your wallet
        const signedTransaction = await wallet.signTransaction(transaction);
        
        // Send the transaction using the provided RPC endpoint
        const connection = new Connection(rpcEndpoint || 'https://flying-torrie-fast-mainnet.helius-rpc.com');
        const signature = await connection.sendTransaction(signedTransaction);
        
        // Wait for confirmation
        const latestBlockhash = await connection.getLatestBlockhash();
        await connection.confirmTransaction({
          signature,
          blockhash: latestBlockhash.blockhash,
          lastValidBlockHeight: latestBlockhash.lastValidBlockHeight
        });
        
        // Send back the signature
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          result: { signature }
        }, '*');
      } catch (error) {
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          error: error.message
        }, '*');
      }
      break;
      
    case 'jupiterStake':
      try {
        const { transaction: transactionBase64, userPublicKey, rpcEndpoint } = payload;
        
        // Deserialize the VersionedTransaction
        const transactionBuf = Buffer.from(transactionBase64, 'base64');
        const versionedTransaction = VersionedTransaction.deserialize(transactionBuf);
        
        // Update the recent blockhash
        const connection = new Connection(rpcEndpoint || 'https://flying-torrie-fast-mainnet.helius-rpc.com');
        const { blockhash } = await connection.getLatestBlockhash();
        versionedTransaction.message.recentBlockhash = blockhash;
        
        // Sign the transaction with your wallet
        const signedTransaction = await wallet.signTransaction(versionedTransaction);
        
        // Send the transaction
        const signature = await connection.sendTransaction(signedTransaction);
        
        // Wait for confirmation
        const latestBlockhash = await connection.getLatestBlockhash();
        await connection.confirmTransaction({
          signature,
          blockhash: latestBlockhash.blockhash,
          lastValidBlockHeight: latestBlockhash.lastValidBlockHeight
        });
        
        // Send back the signature
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          result: { signature }
        }, '*');
      } catch (error) {
        event.source.postMessage({
          source: 'alpha-parent',
          requestId,
          error: error.message
        }, '*');
      }
      break;
      
    default:
      event.source.postMessage({
        source: 'alpha-parent',
        requestId,
        error: `Unknown action: ${action}`
      }, '*');
  }
});
```

MESSAGE FORMATS
===============

1. GET PUBLIC KEY
-----------------
From iframe:
```javascript
{
  source: 'alpha-iframe',
  action: 'getPublicKey',
  payload: {},
  requestId: 'jupiter-1234567890-abc123'
}
```

Response:
```javascript
{
  source: 'alpha-parent',
  requestId: 'jupiter-1234567890-abc123',
  result: { publicKey: 'ABC123...' }
}
```

2. SIGN TRANSACTION
-------------------
From iframe:
```javascript
{
  source: 'alpha-iframe',
  action: 'signTransaction',
  payload: {
    transaction: 'base64-encoded-transaction',
    rpcEndpoint: 'https://flying-torrie-fast-mainnet.helius-rpc.com'
  },
  requestId: 'solana-1234567890-abc123'
}
```

Response:
```javascript
{
  source: 'alpha-parent',
  requestId: 'solana-1234567890-abc123',
  result: { signature: 'base64-encoded-signed-transaction' }
}
```

3. JUPITER SWAP
---------------
From iframe:
```javascript
{
  source: 'alpha-iframe',
  action: 'jupiterSwap',
  payload: {
    swapTransaction: 'base64-encoded-versioned-transaction',
    userPublicKey: 'ABC123...',
    rpcEndpoint: 'https://flying-torrie-fast-mainnet.helius-rpc.com'
  },
  requestId: 'jupiter-1234567890-abc123'
}
```

Response:
```javascript
{
  source: 'alpha-parent',
  requestId: 'jupiter-1234567890-abc123',
  result: { signature: 'transaction-signature' }
}
```

4. JUPITER STAKE
----------------
From iframe:
```javascript
{
  source: 'alpha-iframe',
  action: 'jupiterStake',
  payload: {
    transaction: 'base64-encoded-versioned-transaction',
    userPublicKey: 'ABC123...',
    rpcEndpoint: 'https://flying-torrie-fast-mainnet.helius-rpc.com'
  },
  requestId: 'jupiter-1234567890-abc123'
}
```

Response:
```javascript
{
  source: 'alpha-parent',
  requestId: 'jupiter-1234567890-abc123',
  result: { signature: 'transaction-signature' }
}
```

ERROR RESPONSE FORMAT
====================
For any error:
```javascript
{
  source: 'alpha-parent',
  requestId: 'request-id',
  error: 'Error message here'
}
```

IMPORTANT NOTES
===============

1. **Wallet Object**: Make sure you have a `wallet` object available in your parent window
   that implements the `signTransaction()` method and has a `publicKey` property.

2. **RPC Endpoint**: The iframe now sends the RPC endpoint in each request. The parent uses this
   endpoint to connect to the correct Solana network (mainnet, devnet, etc.).

3. **Transaction Types**: 
   - Solana functions use regular `Transaction` objects
   - Jupiter functions use `VersionedTransaction` objects
   - The `signTransaction` action handles both types automatically

4. **Message Sources**: 
   - Iframe sends: `source: 'alpha-iframe'`
   - Parent responds: `source: 'alpha-parent'`

5. **Request IDs**: Each request has a unique ID that must be returned in the response
   to match the request with its response.

6. **Error Handling**: All actions include proper error handling and will return
   error messages if something goes wrong.

7. **Jupiter Transactions**: 
   - `jupiterSwap`: Receives a pre-built VersionedTransaction from Jupiter API
   - `jupiterStake`: Receives a pre-built VersionedTransaction from Jupiter API
   - Both actions handle the complete flow: sign → send → confirm

TESTING
=======
To test if your implementation is working:

1. Check browser console for any errors
2. Try a simple Solana transaction first (like receiveSol)
3. Then try Jupiter functions (swapTokenByUser, stakeByUser)
4. Verify that transactions are being signed and sent successfully

The iframe will automatically fall back to local wallets if the parent wallet is not available or fails.

DEBUGGING
=========
If transactions aren't working:

1. Check the browser console for error messages
2. Verify that the `wallet` object is properly initialized
3. Make sure the RPC endpoint is accessible
4. Check that the transaction format is correct (base64 encoded)
5. Verify that the wallet has sufficient SOL for transaction fees 